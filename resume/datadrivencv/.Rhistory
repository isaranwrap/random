# library()
# > devtools::install_github("nstrayer/datadrivencv")
# Using github PAT from envvar GITHUB_PAT
# Error: Failed to install 'unknown package' from GitHub:
#   HTTP error 401.
# Bad credentials
#
# Rate limit remaining: 59/60
# Rate limit reset at: 2022-04-11 01:33:58 UTC
install.packages("datadrivencv")
# library()
# > devtools::install_github("nstrayer/datadrivencv")
# Using github PAT from envvar GITHUB_PAT
# Error: Failed to install 'unknown package' from GitHub:
#   HTTP error 401.
# Bad credentials
#
# Rate limit remaining: 59/60
# Rate limit reset at: 2022-04-11 01:33:58 UTC
install.packages("devtools")
devtools::install_github("nstrayer/datadrivencv")
# library()
# > devtools::install_github("nstrayer/datadrivencv")
# Using github PAT from envvar GITHUB_PAT
# Error: Failed to install 'unknown package' from GitHub:
#   HTTP error 401.
# Bad credentials
#
# Rate limit remaining: 59/60
# Rate limit reset at: 2022-04-11 01:33:58 UTC
install.packages("devtools")
install.packages("devtools")
devtools::install_github("nstrayer/datadrivencv")
install.packages("datadrivencv")
library(datadrivencv)
list.files()
list.files("..")
list.files("../..")
list.files("../../..")
datadrivencv::use_datadriven_cv(
full_name = "Ishan Saran",
data_location = "https://docs.google.com/spreadsheets/d/1-wnLVEmF8TawSyaYPL_njfHp0lcrFBFxQTtTdoO87yE/edit?usp=sharing",
pdf_location = "https://github.com/isaranwrap/random/resume.pdf",
pdf_location = "https://github.com/isaranwrap/random/resume.html",
source_location = "https://github.com/isaranwrap/"
)
datadrivencv::use_datadriven_cv(
full_name = "Ishan Saran",
data_location = "https://docs.google.com/spreadsheets/d/1-wnLVEmF8TawSyaYPL_njfHp0lcrFBFxQTtTdoO87yE/edit?usp=sharing",
pdf_location = "https://github.com/isaranwrap/random/resume.pdf",
html_location = "https://github.com/isaranwrap/random/resume.html",
source_location = "https://github.com/isaranwrap/"
)
list.files()
render_cv
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
list.files()
datadrivencv::use_datadriven_cv(
full_name = "Ishan Saran",
data_location = "https://docs.google.com/spreadsheets/d/1-wnLVEmF8TawSyaYPL_njfHp0lcrFBFxQTtTdoO87yE/edit?usp=sharing",
pdf_location = "https://github.com/isaranwrap/random/resume.pdf",
html_location = "https://github.com/isaranwrap/random/resume.html",
source_location = "https://github.com/isaranwrap/"
)
library(googlesheets4)
datadrivencv::use_datadriven_cv(
full_name = "Ishan Saran",
data_location = "https://docs.google.com/spreadsheets/d/1-wnLVEmF8TawSyaYPL_njfHp0lcrFBFxQTtTdoO87yE/edit?usp=sharing",
pdf_location = "https://github.com/isaranwrap/random/resume.pdf",
html_location = "https://github.com/isaranwrap/random/resume.html",
source_location = "https://github.com/isaranwrap/"
)
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
devtools::install_github("tidyverse/googlesheets4")
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# This script builds both the HTML and PDF versions of your CV
# If you wanted to speed up rendering for googlesheets driven CVs you could use
# this script to cache a version of the CV_Printer class with data already
# loaded and load the cached version in the .Rmd instead of re-fetching it twice
# for the HTML and PDF rendering. This exercise is left to the reader.
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the PDF version to temporary html location
tmp_html_cv_loc <- fs::file_temp(ext = ".html")
rmarkdown::render("cv.rmd",
params = list(pdf_mode = TRUE),
output_file = tmp_html_cv_loc)
# Convert to PDF using Pagedown
pagedown::chrome_print(input = tmp_html_cv_loc,
output = "cv.pdf")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
request_retry()
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
#devtools::install_github("nstrayer/datadrivencv")
library(datadrivencv)
#devtools::install_github("tidyverse/googlesheets4")
library(googlesheets4)
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
gs4_deauth()
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# This tells google sheets to not try and authenticate. Note that this will only
# work if your sheet has sharing set to "anyone with link can view"
googlesheets4::sheets_deauth()
gs4_deauth()
googlesheets4::gs4_deauth()
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.Rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
# Knit the HTML version
rmarkdown::render("cv.Rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
list.files()
# Knit the HTML version
rmarkdown::render("cv.rmd",
params = list(pdf_mode = FALSE),
output_file = "cv.html")
list.files()
